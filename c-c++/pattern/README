<<大话设计模式>>
  // 很多if-else, switch的考虑使用多态, 此时将各分支抽象为类

  面向对象的编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象的抽象集合才是类。

  对象的继承关系时在编译时就定义好了，所以无法在运行时改变从父类继承的实现。子类的实现与它的父类有非常强的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化。当你需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写或者其他更适合的类替换。这种依赖关系限制了灵活性并最终限制了复用性。

  合成composition／聚合aggregation复用原则，尽量使用合成／聚合，尽量不要使用类继承。

  聚合表示一种弱的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成则是一种强的‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。

  优先使用对象的合成／聚合将有助于你保持每个类被封装，并被集中在单个任务上。这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物。

/////////////////////////// Principle
1. Single responsibility principle [SRP]
  就一个类而言，应该仅有一个引起它变化的原因。(功能变化)
  如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。
  软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。
  如何判断，如果你想到多于一个的动机去改变一个类，那么这个类就是具有多于一个的职责。

2. Open-Closed principle [OCP]
  软件实体（类，模块，函数等）应该可以扩展，但是不可修改。
  Open for extension, and closed for modification.
  无论模块多么封闭，都会存在一些无法对之封闭的变化。既然不可能完全封闭，设计人员必须对他设计的模块应该对哪些变化封闭作出选择。他必须猜测出最有可能发生的变化种类，然后构造抽象来隔离那些变化。
  在我们最初编写代码时，假设变化不会发生。当变化发生时，我们就创建抽象来隔离以后发生的同类变化。
  面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码。
  开放－封闭原则是面向对象设计的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处：可维护，可扩展，可复用，灵活性好.开发人员应该仅对程序中呈现出频繁变化的那些部分作出抽象，然而，对于应用程序中每个部分都刻意地进行抽象同样不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。

3. 依赖倒转原则 Dependence Inversion Principle[DIP]
  抽象不应该依赖细节，细节应该依赖抽象。
  针对接口编程，不要对实现编程。
  高层模块不应该依赖低层模块。两个都应该依赖抽象。
  （参考计算机的模块）
  抽象不应该依赖细节。细节应该依赖抽象。

  依赖倒转其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都时终止于抽象类或接口，那么就是面向对象设计，反之就是过程化的设计


4. 里氏代换原则Liskov Substitution Principle [LSP] 
  为什么依赖抽象的接口或抽象类就不怕更改？

  子类型必须能够替换掉它们的父类型。
  只有当子类可以替换掉父类，软件单位的功能不受到影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。

  正由于子类的可替换性才使得使用父类类型的模块在无需修改的情况下可以进行扩展。

5. 迪米特法则 law of Demeter, LoD / Least Knowledge Principle
  如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的互相作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。
  强调在类的设计上，每一个类都应当尽量降低成员的访问权限。根本思想强调了类之间的松耦合。
