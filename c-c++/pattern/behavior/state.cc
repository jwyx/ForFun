// <<大话设计模式>>
// 公司加班

// state pattern: 当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像看起来改变了其类。
//
// 主要解决：
//  当一个对象的行为取决与它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑使用状态模式
//  本身业务需求有多个状态时候
//
// Context: 维护一个ConcreteState子类的实例，这个实例定义当前的状态。state; Request(): 对请求做处理，并设置下一个状态
// State: 抽象状态类，定义一个接口以封装与Context的一个特定状态相关的行为。Handle(Context context): 转移到下一个状态;
// ConcreteState: 具体状态，每个子类实现一个与Context的一个状态相关的行为.
