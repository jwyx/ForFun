// Observer pattern (Publish/Subscribe):
//  定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。

// Subject:
// [Attach(in: Observer),
//  Detach(in: Observer),
//  Notify()
// ]
//  它把所有对观察者对象引用保存在一个聚集中，每个主题都可以有任何数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。
// Observer:
// [Update()]
//  抽象观察者，为所有的具体观察者定义一个接口，在得到主题的通知时更新自己。
//
// ConcreteSubject:
//  具体主题，将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。
//
// ConcreteObserver:
//  具体观察者，实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调。
//
// 不足: update需要同名函数
// 补足: delegate, C#中
